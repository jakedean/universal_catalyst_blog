<% provide(:title, 'My Thoughts') %>

<div class="non_h_title">My Thoughts</div>

<div class="hero-unit">
  <h1>Computer Science Resources</h1>
  <p>
     I have to say I have been so grateful to have access to great FREE learning materials as I learn more and more computer science.  I have done quite a bit of work on the student loan bubble and freeing materials for people to develop valuable skills could be the beginnings of a sane educational system for our country.  I started this journey with codecademy.com some time ago, and that was a great way to get my feet wet.  People give codecademy a tough time in the blogosphere because they say when people have to move to a real programming environment they will not be able to make the jump.  I would counter that with the argument that anything that lowers the barrier to getting people excited about computer science is a victory.  There are 120,000 computer programming jobs created every year and only 40,000 graduates with CS degrees, anything to help that ratio even out is a plus.   
</p>


<p>
	Sites like Udacity and Coursera are incredible despite Cornell’s inexplicable absence from Coursera!  My one criticism about Coursera is that they do not keep the materials on the site once the class is finished, I guess it would be nice to release that to the world so anybody could have access to the lectures.  
</p>

<p>
  People often tell me they started programming a bit but got stuck and quit because there was no instructor to help them out.  The same thing would have happened to me if I did not rely on stack overflow.  The most important skill for the beginner programmer I think is the ability to effectively find answers to errors on stack overflow.  It is just and incredible wealth of knowledge, I don’t think there has been an error I have had that someone else did not report on the site… amazing hah.
</p>


<p>
  I was also taken back by the amount of free e-books that are online.  People actually take the time to write a book they are going to release for free, that is amazing.  People in the software community actually care about spreading knowledge and that is how I know it is the right place for me.  If someone has enough discipline to teach themselves, I think he or she can get a great base for a start in programming for free on the internet.  Professional experience will supplement this education of course, but no company is going to pay you to get started, that is your job.    
</p>

 </div>

<div class="hero-unit">
  <h1>The Jump</h1>
  <p>
     When I told people I was going to learn how to code and hopefully start a career with some kind of software development their responses to me were all but encouraging. I heard things like, “You need to get a degree in computer science to start any sort of career like that” or “How can you expect to show an employer you have learned enough?” So I started learning the basics of programming with JavaScript, Ruby and Python and it dawned on me that my medley of economics classes and pre-med classes were perfect preparation for computer science. The aspects that drew from economics were all of the constraints placed on the code to make it act exactly as I wanted and the aspects that drew from my pre-med preparation came specifically from the dreaded organic chemistry class I took my junior year at Cornell. 
</p>


<p>
     Organic chemistry is defined by a set of guidelines and once you master them you can create almost anything. The beauty of organic chemistry lies in the synthesis process, or the ability to convert one chemical compound to another through a series of steps. When most students jump into these synthesis problems for the first time they are creating bulky solutions often with many more steps than necessary. As students go on they begin creating elegant solutions whether it be the shortest ones or ones that have a desired intermediate step. Getting from compound A to compound B is a puzzle, and it plays out in your head before it ends up on paper. From what I can tell thus far coding is much the same. You know where you want to end up and there are an infinite amount of ways to get there, some obviously more elegant than others. So when I was setting up constraints for economics problems and working through organic chemistry problems I was really preparing myself to understand the infinitely applicable problem solving thought process. The specific rules are different in coding, but once you get past those you move to the familiar problem solving thought process that I have been practicing for years in my studies at Cornell.


  </p>
 </div>





