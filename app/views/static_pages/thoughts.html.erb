<% provide(:title, 'My Thoughts') %>

<div class="non_h_title">My Thoughts</div>

<div class="hero-unit">
  <h1>The Jump</h1>
  <p>
     When I told people I was going to learn how to code and hopefully start a career with some kind of software development their responses to me were all but encouraging. I heard things like, “You need to get a degree in computer science to start any sort of career like that” or “How can you expect to show an employer you have learned enough?” So I started learning the basics of programming with JavaScript, Ruby and Python and it dawned on me that my medley of economics classes and pre-med classes were perfect preparation for computer science. The aspects that drew from economics were all of the constraints placed on the code to make it act exactly as I wanted and the aspects that drew from my pre-med preparation came specifically from the dreaded organic chemistry class I took my junior year at Cornell. 
</p>


<p>
     Organic chemistry is defined by a set of guidelines and once you master them you can create almost anything. The beauty of organic chemistry lies in the synthesis process, or the ability to convert one chemical compound to another through a series of steps. When most students jump into these synthesis problems for the first time they are creating bulky solutions often with many more steps than necessary. As students go on they begin creating elegant solutions whether it be the shortest ones or ones that have a desired intermediate step. Getting from compound A to compound B is a puzzle, and it plays out in your head before it ends up on paper. From what I can tell thus far coding is much the same. You know where you want to end up and there are an infinite amount of ways to get there, some obviously more elegant than others. So when I was setting up constraints for economics problems and working through organic chemistry problems I was really preparing myself to understand the infinitely applicable problem solving thought process. The specific rules are different in coding, but once you get past those you move to the familiar problem solving thought process that I have been practicing for years in my studies at Cornell.


  </p>
 </div>





